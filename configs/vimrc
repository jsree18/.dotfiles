" Os specifc stuff
let s:is_win = has('win64') || has('win32')
let s:is_nix = has('unix') || has('macunix') || has('win32unix')
let s:is_unix = has('unix')
let s:is_mac = has('macunix')
let s:is_gui = has('gui_running')
let s:mac_gui = has('gui_macvim') && has('gui_running')
let s:is_nvim = has('nvim')

if s:is_win
  if s:is_nvim
    let s:vim_root='~\AppData\Local\nvim\'
  else
    let s:vim_root='~\AppData\Local\vim\'
  endif
  let s:vim_esc='\'
elseif s:is_nix
  if s:is_nvim
    let s:vim_root='~/.config/nvim/'
  else
    let s:vim_root='~/.vim/'
  endif
  let s:vim_esc='/'
endif
let s:vim_tmp_dir=s:vim_root.".tmp".s:vim_esc

" Set encoding to UTF-8
set encoding=utf-8

" Be vImproved
set nocompatible

" Leader
let mapleader = " "
nnoremap <Space> <Nop>

" Basic vim config
set encoding=utf-8
set laststatus=2     " Always display the status line
set showcmd
set ruler
set noerrorbells

"  Highlight syntax
syntax on

"  Modeline
set modelines=0
set nomodeline

"  Search settings
set incsearch        " do incremental searching
set hls              " highlight search
set ignorecase       " ignore case serch

"  Whitespace settings
set noexpandtab
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
"set list
set listchars=tab:→\ ,space:·,trail:¬,nbsp:.,extends:❯,precedes:❮
map <F3> :set list! list? <CR>

"  Show line numbers relative
set number
set relativenumber

set cursorline
"  CursorColumn
set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

"  Backup/Swap/Undo stuff
"set nobackup
"set noswapfile
execute 'set backupdir='.s:vim_tmp_dir.'backup'.s:vim_esc.s:vim_esc
execute 'set directory='.s:vim_tmp_dir.'swap'.s:vim_esc.s:vim_esc
execute 'set undodir='.s:vim_tmp_dir.'undo'.s:vim_esc.s:vim_esc
set backupskip=/tmp/*,/private/tmp/*"
"   turn on undo across sessions
set undofile
set history=25
set undolevels=25

"  Split stuff
set splitbelow
set splitright


" Plugins
"  Plug as plugin manager
if empty(glob(s:vim_root . 'autoload/plug.vim'))
  let s:vim_autoload = s:vim_root . 'autoload' . s:vim_esc
  let s:vim_autoload_plug = s:vim_autoload . 'plug.vim'
  if s:is_win
    silent execute '!powershell md ' . s:vim_autoload
    silent execute '!powershell Invoke-WebRequest -Uri https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -OutFile ' . s:vim_autoload_plug
  elseif s:is_nix
    silent execute '!curl -fLo ' . s:vim_autoload_plug . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  endif
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(s:vim_root . 'plugged')

" themes
Plug 'morhetz/gruvbox'
Plug 'tomasr/molokai'
Plug 'kien/rainbow_parentheses.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ctrlpvim/ctrlp.vim'
Plug 'editorconfig/editorconfig-vim'

call plug#end()
" Plugins - end


" KeyBindings
"  Buffer movement
nmap <leader>h :wincmd h<CR>
nmap <leader>j :wincmd j<CR>
nmap <leader>k :wincmd k<CR>
nmap <leader>l :wincmd l<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Right> :wincmd l<CR>
"  Move across visual line under wrap
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
"  Slipts Resizing
map - <C-W>-
map + <C-W>+
"  Visual line hotkey
nmap <leader><leader> V
nnoremap <Leader>gd :GoDef<Enter>

" Theme
colorscheme gruvbox
set background=dark
"  RainBow parentheses Always On
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"  NerdTree
let NERDTreeMinimalUI = 1
nnoremap <Leader>pt :NERDTreeToggle<Enter>
nnoremap <silent> <Leader>pv :NERDTreeFind<CR>

" CtrlP
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
nmap <leader>pf :CtrlP<CR>

